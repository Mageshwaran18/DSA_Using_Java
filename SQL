/*
Query to find distinct city names from the STATION table where:
- The first character is a vowel (a, e, i, o, or u) and 
- The last character is also a vowel (a, e, i, o, or u)
Case insensitive comparison is used via LOWER function
*/
SELECT DISTINCT ST.CITY 
FROM STATION ST 
WHERE LOWER(SUBSTR(CITY,1,1)) IN ('a','e','i','o','u') AND
LOWER(SUBSTR(CITY,LENGTH(CITY),LENGTH(CITY))) IN ('a','e','i','o','u');

/* 
Refer SQL 1581 

COUNT(COLUMN) --> Never count the null values 
When ever you perform the aggregation on a specific value , then you should use GROUP BY 
*/

SELECT V.CUSTOMER_ID,COUNT(V.VISIT_ID) AS COUNT_NO_TRANS
FROM VISITS V
LEFT JOIN TRANSACTIONS T  ON V.VISIT_ID=T.VISIT_ID
WHERE T.TRANSACTION_ID IS NULL
GROUP BY V.CUSTOMER_ID
ORDER BY COUNT_NO_TRANS DESC;

/*

DATEDIFF(d1,d2) 

if d1>d2 --> +ve no.of.days difference ( greater and lesser is defined by the date which is most recent )
DATEDIFF('2005.01.01','2004.12.31') = 1
if d2>d1 --> -ve no.of.days difference ( greater and lesser is defined by the date which is most recent )
DATEDIFF('2004.12.31','2005.01.01') = 1

*/


-- SQL LeetCode 197 
SELECT w1.id
FROM Weather w1 
JOIN Weather w2
WHERE DATEDIFF(w1.recordDate,w2.recordDate)=1 AND w1.temperature > w2.temperature;


-- SQL LeetCode 1661 

with ProcessTimes as (
    select a.machine_id,a.process_id,(b.timestamp-a.timestamp) AS processing_time
    from Activity a
    join Activity b 
    on a.machine_id=b.machine_id
    AND a.process_id=b.process_id
    AND a.activity_type = 'start'
    AND b.activity_type = 'end'
)

select machine_id , ROUND(AVG(processing_time),3) AS processing_time

from ProcessTimes

Group By 

machine_id;

-- SQL LeetCode 178 

select s.score, 
DENSE_RANK() over(order by s.score DESC) as 'rank'
from Scores s;

-- SQL LeetCode 1280

SELECT S.student_id,S.student_name,Sub.subject_name,COUNT(E.subject_name) as attended_exams 
FROM Students S
CROSS JOIN Subjects Sub
LEFT JOIN Examinations E on S.student_id=E.student_id AND Sub.subject_name=E.subject_name
GROUP BY S.student_id,S.Student_name,Sub.subject_name
ORDER BY S.student_id,Sub.subject_name;

-- SQL LeetCode 570 [ Managers with at Least 5 Direct Reports ]

-- Using SubQuery 

SELECT E.name 
FROM Employee E
WHERE E.id in (SELECT E.ManagerId
FROM Employee E
WHERE E.ManagerId IS NOT NULL 
GROUP BY E.ManagerId
HAVING Count(E.ManagerId) >= 5);

-- Using Self Joins 

SELECT E2.name
FROM Employee E1
JOIN Employee E2 ON E1.managerId=E2.id
GROUP BY E2.id
HAVING COUNT(E1.managerId) >= 5;

-- SQL LeetCode 1934 [ Confirmation Rate ] 

WITH Confirmation_Table AS(SELECT S.user_id,COUNT(C.user_id) AS "Total_Request",
SUM(
    CASE C.action
    WHEN "confirmed" Then 1 
    ELSE 0
    END
) AS "Total_Confirmed"
FROM Signups S
LEFT JOIN Confirmations C ON S.user_id=C.user_id
GROUP BY S.user_id)

SELECT CT.user_id , IFNULL(ROUND(CT.Total_Confirmed/CT.Total_Request , 2),0) AS "confirmation_rate"
FROM  Confirmation_Table CT;

-- SQL LeetCode 1251 [ Average Selling Price ]

SELECT P.product_id,IFNULL(ROUND(SUM((P.price*U.units))/SUM(U.units),2),0) AS "average_price"
FROM Prices P 
LEFT JOIN UnitsSold U ON P.product_id=U.product_id AND U.purchase_date BETWEEN P.start_date AND P.end_date
GROUP BY P.product_id;

-- SQL LeetCode 1075 [ Project Employees I ]

SELECT P.project_id,ROUND(AVG(E.experience_years),2) AS "average_years" 
FROM Project P 
JOIN Employee E ON P.employee_id = E.employee_id
GROUP BY P.project_id;

-- SQL LeetCode 1633 [ Percentage of Users Attended a Contest ]

SELECT R.contest_id ,ROUND(COUNT(R.user_id) / (
    SELECT COUNT(U.user_id) 
    FROM Users U
    )*100, 2)AS percentage
FROM Register R
GROUP BY R.contest_id
ORDER BY percentage DESC , R.contest_id ASC ;

-- SQL LeetCode 1211  [ Queries Quality and Percentage ] 

SELECT Q.query_name , ROUND(AVG(Q.rating/Q.position),2) AS "quality",
    ROUND
    (
        SUM(
        CASE 
        WHEN Q.rating < 3 THEN 1
        ELSE 0
        END
        ) / COUNT(Q.query_name)*100
    ,2) AS "poor_query_percentage"
FROM QUERIES Q
GROUP BY Q.query_name;


-- SQL LeetCode 1193  [ Monthly Transactions I ]

SELECT 

    LEFT(T.trans_date ,7) AS 'month' ,
    T.country AS 'country',
    COUNT(T.id) AS 'trans_count',
    SUM(T.state ='approved') AS 'approved_count',
    SUM(T.amount) AS 'trans_total_amount',
    SUM((T.state = 'approved') * T.amount) AS 'approved_total_amount'

FROM Transactions T

GROUP BY 
    month,
    country
;

-- SQL LeetCode 1174 [ Immediate Food Delivery II ]

WITH CTE AS (
SELECT D.delivery_id,
ROW_NUMBER() OVER( PARTITION BY D.customer_id ORDER BY D.order_date ) AS 'nth_order_of_the_customer',
CASE  
WHEN D.order_date = D.customer_pref_delivery_date THEN 'immediate'
ELSE 'schedule'
END AS 'order'
FROM Delivery D
)

SELECT ROUND(SUM(C.order='immediate')/COUNT(C.delivery_id)*100,2) AS 'immediate_percentage'
FROM CTE C
WHERE C.nth_order_of_the_customer=1;

-- SQL LeetCode 550 [ Game Play analysis IV ]

-- CTE1: Get each player's first login date and the day after that
WITH CTE1 AS (
    SELECT 
        A.player_id,
        -- Get the earliest login date for each player
        MIN(A.event_date) AS first_login_date,
        -- Calculate the next day after the first login date
        DATE_ADD(MIN(A.event_date), INTERVAL 1 DAY) AS next_day_of_login
    FROM Activity A 
    GROUP BY A.player_id
),

-- CTE2: Count how many players logged in on the day after their first login
CTE2 AS (
    SELECT 
        -- Count the number of players who have a login entry exactly one day after their first login
        COUNT(CTE1.player_id) AS consecutive_login
    FROM CTE1
    JOIN Activity A1 
        ON A1.player_id = CTE1.player_id 
       AND A1.event_date = CTE1.next_day_of_login
),

-- CTE3: Count the total number of unique players in the Activity table
CTE3 AS (
    SELECT 
        COUNT(DISTINCT A2.player_id) AS total_players
    FROM Activity A2
)

-- Final SELECT: Calculate the fraction of players who logged in the day after their first login
SELECT 
    ROUND(CTE2.consecutive_login / CTE3.total_players, 2) AS fraction
FROM 
    CTE2, CTE3;


-- SQL LeetCode 1141  [ User Activity for the last 30 days  I ] 

SELECT A.activity_date AS "day" , COUNT(DISTINCT A.user_id) AS "active_users"
FROM Activity A
WHERE A.activity_date BETWEEN "2019-06-28" AND "2019-07-27"
GROUP BY A.activity_date;

--SQL LeetCode 1070 [ Product Sales Analysis III ]

WITH CTE1 AS (
    SELECT S.product_id,S.year AS 'first_year',S.quantity,S.price,
    DENSE_RANK() OVER(PARTITION BY S.product_id ORDER BY S.year) AS "rank_of_the_year"
    FROM Sales S
)

SELECT C1.product_id,C1.first_year,C1.quantity,C1.price
FROM CTE1  C1
WHERE C1.rank_of_the_year=1;

--SQL LeetCode 1045 [ Customer who bought all products ]

WITH CTE1 AS (
SELECT * 
FROM Customer C
GROUP BY C.customer_id,C.product_key
),

CTE2 AS (
    SELECT COUNT(DISTINCT P.product_key) AS 'count_of_products'
    FROM Product P
),

CTE3 AS (
    SELECT CTE1.customer_id,COUNT(CTE1.customer_id) AS 'total_buys_of_customer'
    FROM CTE1 
    GROUP BY CTE1.customer_id
)

SELECT CTE3.customer_id
FROM CTE3 , CTE2
WHERE CTE3.total_buys_of_customer=CTE2.count_of_products;

'''
--> Create a table where you avoid duplicate entries in the customer table  CTE1
--> Find the total.no.of product 
--> Find the no.of product each user buy from the CTE1 
--> Return the customer id whos no.of.product equals to the total.no.of.product 
'''

-- SQL LeetCode 1731 [ The number of employees which report to each employee ]

SELECT 
        E1.employee_id,
        E1.name,
        COUNT(E2.name) AS 'reports_count',
        ROUND(AVG(E2.age)) AS 'average_age'
FROM 
        Employees E1 
JOIN    
        Employees E2 ON E1.employee_id=E2.reports_to
GROUP BY 
        E1.employee_id
ORDER BY 
        E1.employee_id;

-- SQL LeetCode 610 [ Triangle Judgement ]

SELECT 
    *,
    IF(x+y> z AND y+z>x AND x+z>y , 'Yes', 'No') AS 'triangle'
FROM 
    Triangle;

-- SQL LeetCode 180 [ Consecutive Numbers ]

WITH CTE1 AS (
    SELECT 
        L.num,
        LEAD(L.num,1) OVER() AS 'next_1',
        LEAD(L.num,2) OVER() AS 'next_2'
    FROM 
        Logs L
)

SELECT 
    DISTINCT CTE1.num AS 'ConsecutiveNums'
FROM
    CTE1
WHERE 
    CTE1.num=CTE1.next_1 AND CTE1.next_1=CTE1.next_2;

'''
Understand LEAD in depth 
LEAD(column_name, offset, default_value)

| Parameter                  | Description                                                               |
| -------------------------- | ------------------------------------------------------------------------- |
| `column_name`              | The column to look ahead from the current row.                            |
| `offset` (optional)        | How many rows **forward** to look. Default is `1`.                        |
| `default_value` (optional) | Value returned if there is **no row** at the offset (e.g., end of table). |


col1 = col2 = col3 is not executed as same as in the programing language
it excuted in different way 
(col1=col2)=col3
if col1=col2 , then true will be compared to col3 which will false always
so instead of that we want to use 
col1 = col2 AND col2=col3 
this will make sure your logic is working.
'''






